set.seed(2030)
X <- matrix(rnorm(100,1,.2),ncol= 4)
library(rstiefel)
library(nonparGraphTesting
)
Y <- rbind(X,X)
W <- rustiefel(4,4)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1), d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=50)
}
(costs = sapply(out, '[[', 3))
out[[1]]$Q
out_mat <- sapply(out,'[[',2)
val <- sapply(out_mat,function(x){norm(x - W)})
val
out_mat
View(out_mat)
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[i] <- norm(out[[j]]$Q - W)
}
VALS
VALS
vals
length(QQ)
out[[16]]$Q
W
out[[15]]$Q
out[[14]]$Q
out[[j]]$Q
W
out[[14]]$Q
out[[13]]$Q
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[i] <- norm(out[[j]]$Q - W,"F")
}
vals
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
out[[1]]$Pi
rowSums(out[[1]]$Pi)
out[[1]]$Pi
mean(out[[1]]$Pi)
mean(out[[2]]$Pi)
out[[2]]$Pi
out[[3]]$Pi
out[[4]]$Pi
1/(50*25)
set.seed(2030)
X <- matrix(rnorm(100,4,3),ncol= 4)
Y <- rbind(X,X)
W <- rustiefel(4,4)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1), d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=50)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
set.seed(2030)
X <- matrix(rnorm(100,4,3),ncol= 2)
Y <- rbind(X,X)
W <- rustiefel(2,2)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1), d3=c(-1,1), d4=c(-1,1))
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=50)
}
(costs = sapply(out, '[[', 3))
plot(X,Y%*%out[[1]]$Q)
dim(X)
dim(Y)
par(mfrow=c(1,1))
plot(X)
plot(Y%*%out[[1]]$Q)
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% out[[l]]$Q - out[[l]]$Pi %*% Y,"F")
}
vals2
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% t(out[[l]]$Q) - out[[l]]$Pi %*% Y,"F")
}
vals2
set.seed(2030)
X <- matrix(rnorm(100,4,3),ncol= 2)
W <- rustiefel(2,2)
Y <- rbind(X,X)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
?match_support
out = NULL
for (i in c(1:length(QQ))) {
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=100, lambda_init = 1, lambda_final=.01,eps = .001,eps_OT = .001)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
set.seed(2030)
X <- matrix(rnorm(1000,4,3),ncol= 2)
Y <- rbind(X,X)
W <- rustiefel(2,2)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=100, lambda_init = 1, lambda_final=.01,eps = .001,eps_OT = .001)
}
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=100, lambda_init = .2, lambda_final=.1,eps = .01,eps_OT = .01,alpha = .5)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% t(out[[l]]$Q) - out[[l]]$Pi %*% Y,"F")
}
vals2
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=200, lambda_init = .2, lambda_final=.05,eps = .001,eps_OT = .01,alpha = .5)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% t(out[[l]]$Q) - out[[l]]$Pi %*% Y,"F")
}
vals2
W
theta <- pi/2
W <- matrix(c(sin(theta),cos(theta),-sin(theta),cos(theta)),2,2)
W
theta <- 5*pi/2
W <- matrix(c(sin(theta),cos(theta),-sin(theta),cos(theta)),2,2)
W
W %*% t(W)
W <- matrix(c(cos(theta),sin(theta),-sin(theta),cos(theta)),2,2)
W
W <- matrix(c(sin(theta),cos(theta),cos(theta),-sin(theta)),2,2)
W
W %*% W
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
W %** t(W)
W %*% t(W)
W
theta <- pi/7
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
W
set.seed(2030)
X <- matrix(rnorm(1000,4,3),ncol= 2)
Y <- rbind(X,X)
theta <- pi/7
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=100, lambda_init = .2, lambda_final=.05,eps = .001,eps_OT = .01,alpha = .5)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
theta <- pi/6
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
set.seed(2030)
X <- matrix(rnorm(1000,4,3),ncol= 2)
Y <- rbind(X,X)
theta <- pi/6
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=200, lambda_init = .2, lambda_final=.025,eps = .001,eps_OT = .01,alpha = .5)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% t(out[[l]]$Q) - out[[l]]$Pi %*% Y,"F")
}
vals2
set.seed(2030)
X <- matrix(rnorm(100,4,3),ncol= 2)
Y <- rbind(X,X)
theta <- pi/6
W <- matrix(c(sin(theta),cos(theta),-cos(theta),-sin(theta)),2,2)
Y <- Y %*% W
dim(X) # 25 x 4
dim(Y) # 50 x 4
df.q <- expand.grid(d1=c(-1,1), d2=c(-1,1))#, d3=c(-1,1), d4=c(-1,1))
QQ <- lapply(1:nrow(df.q), function(x) diag(df.q[x,]))
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=1000, lambda_init = .2, lambda_final=.001,eps = .001,eps_OT = .001,alpha = .5)
}
(costs = sapply(out, '[[', 3))
vals <- rep(0,length(QQ))
for (j in 1:length(QQ)) {
vals[j] <- norm(out[[j]]$Q - W,"F")
}
vals
vals2 <- rep(0,length(QQ))
for (l in c(1:length(QQ))) {
vals2[l] <- norm(X %*% t(out[[l]]$Q) - out[[l]]$Pi %*% Y,"F")
}
vals2
out = NULL
for (i in c(1:length(QQ))) {
print(i)
out[[i]] <- match_support(X, Y, Q=QQ[[i]], numReps=2000, lambda_init = .8, lambda_final=.001,eps = .001,eps_OT = .001,alpha = .5)
}
(costs = sapply(out, '[[', 3))
out[[2]]$Pi
ave(out[[2]]$Pi)
ave(out[[2]]$Pi)
1/(25*50)
ave(ave(out[[2]]$Pi))
out[[1]]$Pi
max(out[[1]]$Pi)
1/(50*25)
max(out[[2]]$Pi)
max(out[[3]]$Pi)
max(out[[4]]$Pi)
max(out[[4]]$Pi)*25
max(out[[4]]$Pi)*25*50
if(!require(nonparGraphTesting)) {
install.packages("nonparGraphTesting_0.1.0.tar.gz", repos = NULL, type="source")
library(nonparGraphTesting)
}
if (!require(irlba)) {
install.packages("irlba")
library(irlba)
}
if(!require(igraph)) {
install.packages("igraph")
library(igraph)
}
if(!require(Rcpp)) {
install.packages("Rcpp")
library(Rcpp)
}
Rcpp::cppFunction("
NumericMatrix generateAdjacencyMatrix(NumericMatrix pMatrix) {
int n = pMatrix.cols();
NumericMatrix A(n,n);
for(int i = 0; i < n; i ++) {
for (int j = i + 1; j < n; j++) {
A(i,j) = (int)(rand()%100 < (pMatrix(i,j)* 100));
A(j,i) = A(i,j);
}
}
return A;
}
")
set.seed(1234)
MCs <- 1000
epsilons <- c(.02,.05,.1)
ns <- c(100,200,500,1000)
vals <- list()
i <- 1
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
n <- 100
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
eps <- .02
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.9,.9,.9,.3,.9,.9,.9,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
print(paste0("n = ",n))
vals[[i]][[j]] <- 0
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]] <- nonpar.test(Xhat,Ynew,200)
vals[[i]][[j]] <- nonpar.test(Xnew,Yhat,200)
vals[[i]][[j]]
