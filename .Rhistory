if(!require(foreach)) {
install.packages("foreach")
library(foreach)
}
if(!require(parallel)) {
install.packages("parallel")
library(parallel)
}
if(!require(doParallel)) {
install.packages('doParallel')
library(doParallel)
}
install.packages("nonparGraphTesting_0.1.0.tar.gz", repos = NULL, type="source")
library(nonparGraphTesting)
if (!require(irlba)) {
install.packages("irlba")
library(irlba)
}
if(!require(igraph)) {
install.packages("igraph")
library(igraph)
}
if(!require(Rcpp)) {
install.packages("Rcpp")
library(Rcpp)
}
if(!require(Matrix)) {
install.packages("Matrix")
library(Matrix)
}
cores=detectCores()
cores
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
epsilons <- c(0,.1,.2)
ns <- c(300,500,700)#600,900)
print(paste0("packages loaded, running dcSBM simulation on ",3," cores."))
cl
results_dcsbm <- foreach(n=ns,.packages=c('nonparGraphTesting','irlba','igraph','Rcpp','Matrix')
,.noexport = "generateAdjacencyMatrix" )  %dopar% {
source("./balanced_vs_dcsbm/sbm_vs_dcsbm.R")
#print(paste("eps = ",eps,", n = ",n))
run_simulation_dcsbm(ntimes = 100,n=n,nMC = 500)
}
stopCluster(cl)
