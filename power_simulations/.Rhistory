diag(A1s1) <- rowSums(A1s1) / (nrow(A1s1)-1)
library(Matrix)
diag(A1s1) <- rowSums(A1s1) / (nrow(A1s1)-1)
diag(A2s2) <- rowSums(A2s2) / (nrow(A2s2)-1)
diag(A1s2) <- rowSums(A1s2) / (nrow(A1s2)-1)
diag(A2s1) <- rowSums(A2s1) / (nrow(A2s1)-1)
dat <- list(A1s1,A1s2,A2s1,A2s2)
save(dat,file = "data/dat.RData")
rm(list = ls())
results
load("C:/Users/joshu/Dropbox/Documents/Research/grdpg_nonpar/optimal_transport/nonpar_sims/real_data_results_6-17.Rdata")
library(nonparGraphTesting)
?kernel.stat
kernel.stat
results
results[[1]]
library(nonparGraphTesting)
kernel.stat
run_perm_test
kernel.stat
run_perm_test
rm(list = ls())
getwd()
setwd("./power_simulations")
getwd()
load("MC_results_power_2.Rdata")
vals
results <- matrix(0,9,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
results2 <- t(results)
rm(results)
results2[,"0"] <- sapply(vals$`0`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.05"] <- sapply(vals$`0`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.1"] <- sapply(vals$`0.1`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.15"] <- sapply(vals$`0.15`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.2"] <- sapply(vals$`0.2`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.25"] <- sapply(vals$`0.25`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.3"] <- sapply(vals$`0.3`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.35"] <- sapply(vals$`0.35`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.4"] <- sapply(vals$`0.4`,function(x){sum(ifelse(x > .95,1,0)) })
t(results2)
500 - t(results2)
load("MC_results_power_2.Rdata")
results <- matrix(0,9,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
results2 <- t(results)
rm(results)
results2[,"0"] <- sapply(vals$`0`,mean)
results2[,"0.05"] <- sapply(vals$`0`,mean)
results2[,"0.1"] <- sapply(vals$`0.1`,mean)
results2[,"0.15"] <- sapply(vals$`0.15`,mean)
results2[,"0.2"] <- sapply(vals$`0.2`,mean)
results2[,"0.25"] <- sapply(vals$`0.25`,mean)
results2[,"0.3"] <- sapply(vals$`0.3`,mean)
results2[,"0.35"] <- sapply(vals$`0.35`,mean)
results2[,"0.4"] <- sapply(vals$`0.4`,mean)
results2
vals2 <- vals
results <- matrix(0,9,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
results2 <- t(results)
results <- matrix(0,9,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
names(vals)
results <- matrix(0,8,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
results2 <- t(results)
rm(results)
results2[,"0"] <- sapply(vals$`0`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.05"] <- sapply(vals$`0`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.1"] <- sapply(vals$`0.1`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.15"] <- sapply(vals$`0.15`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.2"] <- sapply(vals$`0.2`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.25"] <- sapply(vals$`0.25`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.3"] <- sapply(vals$`0.3`,function(x){sum(ifelse(x > .95,1,0)) })
results2[,"0.35"] <- sapply(vals$`0.35`,function(x){sum(ifelse(x > .95,1,0)) })
t(results2)
results2[,"0"] <- sapply(vals$`0`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.05"] <- sapply(vals$`0`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.1"] <- sapply(vals$`0.1`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.15"] <- sapply(vals$`0.15`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.2"] <- sapply(vals$`0.2`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.25"] <- sapply(vals$`0.25`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.3"] <- sapply(vals$`0.3`,function(x){sum(ifelse(x < .05,1,0)) })
results2[,"0.35"] <- sapply(vals$`0.35`,function(x){sum(ifelse(x < .05,1,0)) })
t(results2)
library(ggplot2)
library(reshape2)
gg_dat <- as.data.frame(t(results2/100))
gg_dat$eps <- colnames(results2)
gg_dat <- melt(gg_dat)
gg_dat$n <- as.integer(as.character(gg_dat$variable))
gg_dat$variable <- NULL
g <- ggplot(data=gg_dat,aes(x = n, y = value))
g+  theme_bw() +
theme(plot.title = element_text(size = 10,hjust = 0.5))+
ylab("Estimated Power") +
ggtitle("Power Curve for Different Values of Epsilon") +
geom_line(aes(color = eps, group = eps),lwd=1,
position=position_jitter(w=0.02, h=.012)) +
geom_hline(yintercept = .05,linetype = "dashed")+
# scale_x_continuous(limits = c(50,550)) +
scale_y_continuous(limits = c(-0.02,1.02),breaks= c(0.00,0.05,0.25,0.5,.75,1.00))
results <- matrix(0,8,5)
colnames(results) <- c(100,200,300,400,500)
rownames(results) <- names(vals)
results2 <- t(results)
rm(results)
results2[,"0"] <- sapply(vals$`0`,mean)
results2[,"0.05"] <- sapply(vals$`0`,mean)
results2[,"0.1"] <- sapply(vals$`0.1`,mean)
results2[,"0.15"] <- sapply(vals$`0.15`,mean)
results2[,"0.2"] <- sapply(vals$`0.2`,mean)
results2[,"0.25"] <- sapply(vals$`0.25`,mean)
results2[,"0.3"] <- sapply(vals$`0.3`,mean)
results2[,"0.35"] <- sapply(vals$`0.35`,mean)
results2
?nonparGraphTesting
vals[[1]][[1]]
?nonpar.test
library(nonparGraphTesting)
?nonpar.test
n <- 100
eps <- .2
eps <- .3
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
vals[[i]] <- list()
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
MCs <- 10
if (!require(irlba)) {
install.packages("irlba")
library(irlba)
}
if(!require(igraph)) {
install.packages("igraph")
library(igraph)
}
if(!require(Rcpp)) {
install.packages("Rcpp")
library(Rcpp)
}
set.seed(1357)
MCs <- 100
MCs <- 10#0
epsilons <- .3#c(0,.05,.1,.15,.2,.25,.3,.35)#,.4)
ns <- c(100)#,200,300,400)#,500)#,1000)
vals <- list()
i <- 1
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- rep(0,MCs)
k <- 1
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]][k] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
k <- k+1
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
Rcpp::cppFunction("
NumericMatrix generateAdjacencyMatrix(NumericMatrix pMatrix) {
int n = pMatrix.cols();
NumericMatrix A(n,n);
for(int i = 0; i < n; i ++) {
for (int j = i + 1; j < n; j++) {
A(i,j) = (int)(rand()%100 < (pMatrix(i,j)* 100));
A(j,i) = A(i,j);
}
}
return A;
}
")
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- rep(0,MCs)
k <- 1
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]][k] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
k <- k+1
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
test <- nonpar.test(Xnew,Yhat,100,p.val = FALSE)
test
k
rm(vals)
vals <- list()
i <- 1
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- rep(0,MCs)
k <- 1
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]][[k]] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
k <- k+1
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
vals[[i]][[j]][[k]]
vals[[i]][[j]][k] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
rm(vals)
set.seed(1357)
MCs <- 10#0
epsilons <- .3#c(0,.05,.1,.15,.2,.25,.3,.35)#,.4)
ns <- c(100)#,200,300,400)#,500)#,1000)
vals <- list()
i <- 1
Q1 <- diag(1,3)
Q2 <- diag(-1,3)
Q3 <- diag(c(1,-1,-1),3)
Q4 <- diag(c(-1,1,1),3)
Q5 <- diag(c(-1,-1,1),3)
Q6 <- diag(c(-1,1,-1),3)
Q7 <- diag(c(1,1,-1),3)
Q8 <- diag(c(1,-1,1),3)
signs <- list(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8)
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- list() #rep(0,MCs)
k <- 1
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]][k] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
k <- k+1
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
vals[[i]][[j]][[k]] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
vals <- list()
i <- 1
for (eps in epsilons) {
vals[[i]] <- list()
print(paste0("epsilon = ",eps))
B <- matrix(c(.3,.8,.8,.8,.3,.8,.8,.8,.3),3,3)
B2 <- B + diag(eps,3)
nus <- eigen(B)
nus_true1 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
nus <- eigen(B2)
nus_true2 <- nus$vectors %*% diag(abs(nus$values)^(1/2),3,3)
Ipq <- diag(c(1,-1,-1),3,3)
pis <- c(.35,.35,.3)
j <- 1
for (n in ns) {
print(paste0("n = ",n))
vals[[i]][[j]] <- list() #rep(0,MCs)
k <- 1
for (mc in c(1:MCs)) {
print(paste0("Run: ",mc," out of ", MCs, " for n = ",n, ", eps = ",eps))#Matching datasets")
m <- n
assignmentvector1 <- rmultinom(n,1,pis)
assignmentvector2 <- rmultinom(m,1,pis)
Xtrue <- t(assignmentvector1) %*% nus_true1
Ytrue <- t(assignmentvector2) %*% nus_true2
P1 <- Xtrue %*%Ipq %*% t(Xtrue)
P2 <- Ytrue %*% Ipq %*% t(Ytrue)
A <- generateAdjacencyMatrix(P1)
C <- generateAdjacencyMatrix(P2)
Xhat <- irlba(A,3)
Xhat <- Xhat$u %*% diag(Xhat$d)^(1/2)
#Xhat <- Xhat$vectors[,c(1,n-1,n)] %*% diag(abs(Xhat$values[c(1,n-1,n)])^(1/2))
Yhat <- irlba(C,3)
Yhat <- Yhat$u %*% diag(Yhat$d)^(1/2)
#Yhat <- Yhat$vectors[,c(1,n-1,n)] %*% diag(abs(Yhat$values[c(1,n-1,n)])^(1/2))
get_matched <- list()
for (l in c(1:length(signs))) {
get_matched[[l]] <- match_support(Xhat,Yhat
,lambda_init = .2
,alpha = .2
, Q = signs[[l]],numReps = 50)
}
cs <- sapply(get_matched,`[[`,3)
Q <-  get_matched[[which.min(cs)]]$Q
Xnew <- Xhat %*% Q
vals[[i]][[j]][[k]] <-  nonpar.test(Xnew,Yhat,100,p.val = FALSE)
k <- k+1
}
#vals[[i]][[j]] <- vals[[i]][[j]]#/MCs
j <- j + 1
}
names(vals[[i]]) <- ns
i <- i + 1
}
vals[[1]]
vals[[1]][[1]]
vals[[1]][[1]][[1]]
vals[[1]][[1]][[1]]$permutation_results
hist(vals[[1]][[1]][[1]]$permutation_results)
vals[[1]][[1]][[1]]$critical_value
sort(vals[[1]][[1]][[1]]$permutation_results)
sort(vals[[1]][[1]][[1]]$permutation_results)[5]
vals[[1]][[1]]
vals[[1]][[1]][[1]]
vals[[1]][[1]][[1]]$critical_value
vals[[1]][[1]][[2]]$critical_value
vals[[1]][[1]][[3]]$critical_value
vals[[1]][[1]][[4]]$critical_value
vals[[1]][[1]][[5]]$critical_value
vals[[1]][[1]][[6]]$critical_value
vals[[1]][[1]][[7]]$critical_value
vals[[2]][[1]][[7]]$critical_value
vals[[3]][[1]][[7]]$critical_value
vals[[3]][[1]][[7]]$permutation_results
sort(vals[[3]][[1]][[7]]$permutation_results)
sort(vals[[4]][[1]][[7]]$permutation_results)
sort(vals[[4]][[1]][[7]]$critical_value)
vals[[1]][[1]][[1]]
sort(vals[[1]][[1]][[1]]$permutation_results)
?nonpar.test
